// <auto-generated />
using System;
using Media.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Media.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20250627040949_AddEpisodesWithNoAction")]
    partial class AddEpisodesWithNoAction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Media.Models.Episodes", b =>
                {
                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("episodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("episodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("seasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("stillPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mediaId");

                    b.HasIndex("seasonNumber");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Media.Models.Genre", b =>
                {
                    b.Property<int>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gid"));

                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gid");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Media.Models.MediaCast", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.HasIndex("MediaId");

                    b.ToTable("MediaCasts");
                });

            modelBuilder.Entity("Media.Models.MediaGenres", b =>
                {
                    b.Property<int>("mediaGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mediaGenreId"));

                    b.Property<int>("genreId")
                        .HasColumnType("int");

                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.HasKey("mediaGenreId");

                    b.HasIndex("genreId");

                    b.HasIndex("mediaId");

                    b.ToTable("MediaGenres");
                });

            modelBuilder.Entity("Media.Models.MediaItem", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TMDbId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("Media.Models.MovieDetail", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("MovieDetails");
                });

            modelBuilder.Entity("Media.Models.Seasons", b =>
                {
                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<string>("seasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("seasonNumber")
                        .HasColumnType("int");

                    b.HasKey("mediaId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Media.Models.SeriesDetail", b =>
                {
                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("firstAirDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberOfEpisodes")
                        .HasColumnType("int");

                    b.Property<int>("numberOfSeasons")
                        .HasColumnType("int");

                    b.HasKey("mediaId");

                    b.ToTable("SeriesDetail");
                });

            modelBuilder.Entity("Media.Models.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Media.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Media.Models.Episodes", b =>
                {
                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Media.Models.Seasons", "Season")
                        .WithMany()
                        .HasForeignKey("seasonNumber")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Media.Models.MediaCast", b =>
                {
                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Media.Models.MediaGenres", b =>
                {
                    b.HasOne("Media.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Media.Models.MovieDetail", b =>
                {
                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Media.Models.Seasons", b =>
                {
                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Media.Models.SeriesDetail", b =>
                {
                    b.HasOne("Media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("Media.Models.Token", b =>
                {
                    b.HasOne("Media.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
