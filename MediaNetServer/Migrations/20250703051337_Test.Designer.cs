// <auto-generated />
using System;
using MediaNetServer.Data.media.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediaNetServer.Migrations
{
    [DbContext(typeof(MediaContext))]
    [Migration("20250703051337_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Episodes", b =>
                {
                    b.Property<int>("epId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("epId"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("airDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("episodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("episodeNumber")
                        .HasColumnType("int");

                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<string>("overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("rating")
                        .HasColumnType("float");

                    b.Property<int>("seasonNumber")
                        .HasColumnType("int");

                    b.Property<string>("stillPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("epId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("mediaId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Files", b =>
                {
                    b.Property<int>("fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fid"));

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("fileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("fid");

                    b.HasIndex("FolderId");

                    b.HasIndex("tmdbId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Folders", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Genre", b =>
                {
                    b.Property<int>("Gid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Gid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("genreId")
                        .HasColumnType("int");

                    b.HasKey("Gid");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.History", b =>
                {
                    b.Property<int>("historyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("historyId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("episodeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("isFinished")
                        .HasColumnType("bit");

                    b.Property<int?>("position")
                        .HasColumnType("int");

                    b.Property<int?>("seasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("watchedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("historyId");

                    b.HasIndex("UserId");

                    b.HasIndex("tmdbId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Images", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("imageId"));

                    b.Property<int?>("episodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("filePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("imageId");

                    b.HasIndex("tmdbId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaCast", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaItemMediaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("MediaItemMediaId");

                    b.ToTable("MediaCasts");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaGenres", b =>
                {
                    b.Property<int>("mediaGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mediaGenreId"));

                    b.Property<int>("genreId")
                        .HasColumnType("int");

                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.HasKey("mediaGenreId");

                    b.HasIndex("genreId");

                    b.HasIndex("mediaId");

                    b.ToTable("MediaGenres");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaItem", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("BackdropPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TMDbId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("MediaItems");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MovieDetail", b =>
                {
                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("MovieDetails");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Playlist", b =>
                {
                    b.Property<int>("pId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isSystem")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("playlistId")
                        .HasColumnType("int");

                    b.HasKey("pId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.PlaylistItems", b =>
                {
                    b.Property<int>("playlistItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("playlistItemId"));

                    b.Property<DateTime>("addedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("playlistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("releaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("playlistItemId");

                    b.HasIndex("playlistId");

                    b.HasIndex("tmdbId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"));

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("episodeCount")
                        .HasColumnType("int");

                    b.Property<string>("overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("posterPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("rating")
                        .HasColumnType("real");

                    b.HasKey("SeasonId");

                    b.HasIndex("MediaId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.SeriesDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("firstAirDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("lastAirDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("mediaId")
                        .HasColumnType("int");

                    b.Property<int>("numberOfEpisodes")
                        .HasColumnType("int");

                    b.Property<int>("numberOfSeasons")
                        .HasColumnType("int");

                    b.Property<string>("overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("mediaId");

                    b.ToTable("SeriesDetail");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Token", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.WatchProgress", b =>
                {
                    b.Property<int>("watchProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("watchProgressId"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("episodeNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastWatched")
                        .HasColumnType("datetime2");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<int>("seasonNumber")
                        .HasColumnType("int");

                    b.Property<int>("tmdbId")
                        .HasColumnType("int");

                    b.HasKey("watchProgressId");

                    b.HasIndex("UserId");

                    b.HasIndex("tmdbId");

                    b.ToTable("WatchProgress");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Episodes", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany("Episodes")
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Files", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.Folders", "Folder")
                        .WithMany("Items")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("tmdbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.History", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("tmdbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Images", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("tmdbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaCast", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("MediaItemMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaGenres", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("genreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MovieDetail", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Playlist", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.PlaylistItems", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("playlistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("tmdbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Season", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany("Seasons")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.SeriesDetail", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaItem");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Token", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.WatchProgress", b =>
                {
                    b.HasOne("MediaNetServer.Data.media.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediaNetServer.Data.media.Models.MediaItem", "MediaItem")
                        .WithMany()
                        .HasForeignKey("tmdbId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MediaItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Folders", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.MediaItem", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("MediaNetServer.Data.media.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
